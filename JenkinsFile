pipeline {
    agent any
    environment {
        NETLIFY_SITE_ID = '6cda1a95-b546-4388-8f9e-ebc706290706'
        NETLIFY_AUTH_TOKEN = credentials('netlify-token')
        REACT_APP_VERSION = "1.0.$BUILD_ID"
    }

    stages {

        // stage('Docker'){
        //     steps{
        //         sh 'docker build -t my-playwright .'
        //     }
        // }
       
       
        stage('Build') {
            // Agent creation
            agent {
                docker {
                    image 'node:18-alpine'
                    reuseNode true
                }
            }
            steps {
               
                //npm build secton
                
                sh '''
                    echo 'Small change'
                    ls -la
                    node --version
                    npm --version
                    npm ci
                    npm run build
                    ls -la
                '''
            }
        }
        stage('AWS'){
            agent{
                docker{
                    image 'amazon/aws-cli'
                    reuseNode true
                    args "--entrypoint=''"
                }
            }
            environment{
                AWS_S3_BUCKET = 'learn-jenkins-20240109'
            }
            steps{
                withCredentials([usernamePassword(credentialsId: 'my-aws', passwordVariable: 'AWS_SECRET_ACCESS_KEY', usernameVariable: 'AWS_ACCESS_KEY_ID')]) {
                    sh'''
                        aws --version
                        echo "hello s3" > index.html
                        aws s3 sync build s3://mybucket
                    '''
                }
                
            }
        }
        stage("Tests") {
            parallel{
                stage('Unit Test'){
                    agent {
                        docker {
                            image 'node:18-alpine'
                            reuseNode true
                        }
                    }
                    steps{
                        sh '''
                            echo "Test Stage"
                            test -f build/index.html
                            npm test
                        '''
                    }
                     post {
                        always {
                            junit 'jest-results/junit.xml'
                        }
                    }
                }
                stage('E2E'){
                    agent {
                        docker {
                            image 'my-playwright'
                            reuseNode true
                        }
                    }
                    steps{
                        sh '''
                        serve -s build &
                        sleep 10
                        npx playwright test --reporter=html
                        '''
                    }
                     post {
                        always {
                            junit 'jest-results/junit.xml'
                            publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright HTML Report', reportTitles: '', useWrapperFileDirectly: true])
                        }
                    }
                }
                
            }
        }
        stage("Deploy Staging"){
            agent {
                    docker {
                        image 'my-playwright'
                        reuseNode true
                    }
                }
            steps{
                sh '''
                    netlify --version
                    jq --version
                    echo "Deploying to staging . Site ID: $NETLIFY_SITE_ID"
                    netlify status
                    netlify deploy --dir=build --json > deploy-output.json

                '''
                script{
                    env.STAGING_URL = sh(script: "jq -r '.deploy_url' deploy-output.json", returnStdout: true)
                }
            }
            
        }
        stage('Staging E2E'){
            agent {
                docker {
                    image 'my-playwright'
                    reuseNode true
                    }
            }
            environment{
                CI_ENVIRONMENT_URL = "${env.STAGING_URL}"
            }
            steps{
                sh '''
                    npx playwright test --reporter=html
                '''
            }
            post {
                always {
                    junit 'jest-results/junit.xml'
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright Staging E2E Report', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }
        // Commenting to try Continous deployment and Versiosning
        // stage("Approval"){
        //     steps{
        //         timeout(time: 1, unit: 'MINUTES') {
        //             input 'Read for deployment to prod?'
        //         }
        //     }
        // }
        stage('Deploy prod'){
            agent {
                docker {
                    image 'my-playwright'
                    reuseNode true
                    }
            }
            environment{
                CI_ENVIRONMENT_URL = 'https://zesty-donut-cc01fc.netlify.app'
            }
            steps{
                sh '''
                    netlify --version
                    echo "Deploying to production . Site ID: $NETLIFY_SITE_ID"
                    netlify status
                    netlify deploy --dir=build --prod
                    npx playwright test --reporter=html
                '''
            }
            post {
                always {
                    junit 'jest-results/junit.xml'
                    publishHTML([allowMissing: false, alwaysLinkToLastBuild: false, keepAll: false, reportDir: 'playwright-report', reportFiles: 'index.html', reportName: 'Playwright E2E Report', reportTitles: '', useWrapperFileDirectly: true])
                }
            }
        }
        
    }
   
}
